{"ast":null,"code":"export const signup = user => {\n  return fetch(\"http://localhost:8080/signup\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err)); //fetch is standard http client that is  used to make a post request \n  // console.log(user);\n};\nexport const signin = user => {\n  return fetch(\"http://localhost:8080/signin\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err)); //fetch is standard http client that is  used to make a post request \n  // console.log(user);\n};\nexport const authenticate = (jwt, next) => {\n  if (typeof window !== \"undefined\") {\n    localStorage.setItem(\"jwt\", JSON.stringify(jwt)); //for localstorage in browser\n\n    next();\n  }\n};\nexport const signout = next => {\n  if (typeof window !== \"undefined\") {\n    localStorage.removeItem(\"jwt\");\n  }\n\n  next();\n  return fetch(\"http://localhost:8080/signout\", {\n    method: \"GET\"\n  }).then(response => {\n    console.log(\"signout\", response);\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const isAuthenticated = () => {\n  if (typeof window == \"undefined\") {\n    return false;\n  }\n\n  if (localStorage.getItem(\"jwt\")) {\n    return JSON.parse(localStorage.getItem(\"jwt\"));\n  } else {\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/yati/Desktop/react/react-front/src/auth/index.js"],"names":["signup","user","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","catch","err","console","log","signin","authenticate","jwt","next","window","localStorage","setItem","signout","removeItem","isAuthenticated","getItem","parse"],"mappings":"AAAA,OAAO,MAAMA,MAAM,GAACC,IAAI,IAAG;AACvB,SAAOC,KAAK,CAAC,8BAAD,EAAgC;AACxCC,IAAAA,MAAM,EAAC,MADiC;AAExCC,IAAAA,OAAO,EAAC;AACJC,MAAAA,MAAM,EAAC,kBADH;AAEJ,sBAAe;AAFX,KAFgC;AAMxCC,IAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeP,IAAf;AANmC,GAAhC,CAAL,CAQNQ,IARM,CAQDC,QAAQ,IAAG;AACb,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAVM,EAWNC,KAXM,CAWAC,GAAG,IAAEC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXL,CAAP,CADuB,CAavB;AACD;AAEF,CAhBM;AAkBP,OAAO,MAAMG,MAAM,GAACf,IAAI,IAAG;AACvB,SAAOC,KAAK,CAAC,8BAAD,EAAgC;AACxCC,IAAAA,MAAM,EAAC,MADiC;AAExCC,IAAAA,OAAO,EAAC;AACJC,MAAAA,MAAM,EAAC,kBADH;AAEJ,sBAAe;AAFX,KAFgC;AAMxCC,IAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAeP,IAAf;AANmC,GAAhC,CAAL,CAQNQ,IARM,CAQDC,QAAQ,IAAG;AACb,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAVM,EAWNC,KAXM,CAWAC,GAAG,IAAEC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXL,CAAP,CADuB,CAavB;AACD;AAEF,CAhBM;AAiBP,OAAO,MAAMI,YAAY,GAAC,CAACC,GAAD,EAAKC,IAAL,KAAa;AACnC,MAAG,OAAOC,MAAP,KAAiB,WAApB,EAAgC;AAC5BC,IAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA2Bf,IAAI,CAACC,SAAL,CAAeU,GAAf,CAA3B,EAD4B,CACoB;;AAChDC,IAAAA,IAAI;AACP;AAEJ,CANM;AASP,OAAO,MAAMI,OAAO,GAAGJ,IAAD,IAAQ;AAC1B,MAAG,OAAOC,MAAP,KAAkB,WAArB,EACA;AACIC,IAAAA,YAAY,CAACG,UAAb,CAAwB,KAAxB;AACH;;AACDL,EAAAA,IAAI;AACJ,SAAOjB,KAAK,CAAC,+BAAD,EAAiC;AACzCC,IAAAA,MAAM,EAAC;AADkC,GAAjC,CAAL,CAGNM,IAHM,CAGDC,QAAQ,IAAE;AACZI,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBL,QAAtB;AACA,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GANM,EAONC,KAPM,CAOAC,GAAG,IAAGC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAPN,CAAP;AAQH,CAdM;AAgBP,OAAO,MAAMY,eAAe,GAAC,MAAI;AAC7B,MAAG,OAAOL,MAAP,IAAiB,WAApB,EAAgC;AAC5B,WAAO,KAAP;AACH;;AACD,MAAGC,YAAY,CAACK,OAAb,CAAqB,KAArB,CAAH,EAA+B;AAC3B,WAAOnB,IAAI,CAACoB,KAAL,CAAWN,YAAY,CAACK,OAAb,CAAqB,KAArB,CAAX,CAAP;AACH,GAFD,MAGK;AACD,WAAO,KAAP;AACH;AACJ,CAVM","sourcesContent":["export const signup=user =>{\n    return fetch(\"http://localhost:8080/signup\",{\n        method:\"POST\",\n        headers:{\n            Accept:\"application/json\",\n            \"Content-Type\":\"application/json\"\n        },\n        body:JSON.stringify(user)\n    })\n    .then(response =>{\n        return response.json()\n    })\n    .catch(err=>console.log(err))\n    //fetch is standard http client that is  used to make a post request \n   // console.log(user);\n\n};\n\nexport const signin=user =>{\n    return fetch(\"http://localhost:8080/signin\",{\n        method:\"POST\",\n        headers:{\n            Accept:\"application/json\",\n            \"Content-Type\":\"application/json\"\n        },\n        body:JSON.stringify(user)\n    })\n    .then(response =>{\n        return response.json()\n    })\n    .catch(err=>console.log(err))\n    //fetch is standard http client that is  used to make a post request \n   // console.log(user);\n\n};\nexport const authenticate=(jwt,next)=> {\n    if(typeof window !==\"undefined\"){\n        localStorage.setItem(\"jwt\",JSON.stringify(jwt)) //for localstorage in browser\n        next();\n    }\n\n}\n\n\nexport const signout= (next)=>{\n    if(typeof window !== \"undefined\")\n    {\n        localStorage.removeItem(\"jwt\");\n    }\n    next();\n    return fetch(\"http://localhost:8080/signout\",{\n        method:\"GET\"\n    })\n    .then(response=>{\n        console.log(\"signout\",response);\n        return response.json()\n    })\n    .catch(err=> console.log(err))\n}\n\nexport const isAuthenticated=()=>{\n    if(typeof window == \"undefined\"){\n        return false;\n    }\n    if(localStorage.getItem(\"jwt\")){\n        return JSON.parse(localStorage.getItem(\"jwt\"));\n    }\n    else {\n        return false;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}